// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Password1@localhost:5432/dailygeo?schema=public"
}

// https://stackoverflow.com/questions/65162657/one-to-many-self-relation-in-prisma-schema

model UserAccount {
  id                     String                @id @default(uuid())
  email                  String                @unique
  username               String                @unique
  passwordHash           String
  refreshToken           String                @default("")
  roleList               String[]
  challengeStreak        Int                   @default(0)
  challengeSubmissions   ChallengeSubmission[]
  questionSubmissions    QuestionSubmission[]
  profilePicture         Int                   @default(1)
  friends                UserAccount[]         @relation("friends")
  friendsRelation        UserAccount[]         @relation("friends")
  sentFriendRequests     FriendRequest[]       @relation("sender")
  receivedFriendRequests FriendRequest[]       @relation("receiver")
}

model FriendRequest {
  id               String      @id @default(uuid())
  sender           UserAccount @relation("sender", fields: [senderUsername], references: [username])
  receiver         UserAccount @relation("receiver", fields: [receiverUsername], references: [username])
  senderUsername   String
  receiverUsername String
}

model Challenge {
  id                   String                @id @default(uuid())
  startDate            DateTime
  endDate              DateTime
  questions            Question[]
  challengeSubmissions ChallengeSubmission[]
  isActive             Boolean               @default(false)
}

model ChallengeSubmission {
  id                String               @id @default(uuid())
  player            UserAccount          @relation(fields: [playerId], references: [id])
  playerId          String
  isComplete        Boolean              @default(false)
  questionsAnswered QuestionSubmission[]
  totalScore        Int                  @default(0)
  parentChallenge   Challenge            @relation(fields: [parentChallengeId], references: [id])
  parentChallengeId String
}

model Question {
  id                String                   @id @default(uuid())
  parentChallenge   Challenge                @relation(fields: [parentChallengeId], references: [id])
  parentChallengeId String
  correctPos        Json
  submissions       QuestionSubmission[]
  tempSubmissions   TempQuestionSubmission[]
}

model QuestionSubmission {
  id                          String              @id @default(uuid())
  player                      UserAccount         @relation(fields: [playerId], references: [id])
  playerId                    String
  parentChallengeSubmission   ChallengeSubmission @relation(fields: [parentChallengeSubmissionId], references: [id])
  parentChallengeSubmissionId String
  parentQuestion              Question            @relation(fields: [parentQuestionId], references: [id])
  parentQuestionId            String
  attemptPos                  Json
  score                       Int
  distance                    Int
}

model TempQuestionSubmission {
  id               String   @id @default(uuid())
  token            String   @default("")
  parentQuestion   Question @relation(fields: [parentQuestionId], references: [id])
  parentQuestionId String
  attemptPos       Json
  score            Int
  distance         Int
}
